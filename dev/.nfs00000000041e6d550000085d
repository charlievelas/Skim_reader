#include <cstdlib>
#include <iostream>
#include <chrono>
#include <TFile.h>
#include <TTree.h>
#include <TApplication.h>
#include <TROOT.h>
#include <TDatabasePDG.h>
#include <TLorentzVector.h>
#include <TH1.h>
#include <TChain.h>
#include <TCanvas.h>
#include <TBenchmark.h>
#include "clas12reader.h"
using namespace clas12;

void Skim_reader(){

// Input file, output file, HIPO file and Ttree
TString in_file_name = ".q";
TChain chain("hipo");
chain.Add(in_file_name.Data());
auto files=chain.GetListOfFiles();
TFile *tree_file = new TFile("skim_tree.root","recreate");
TTree *tree = new TTree("tree","tree");

auto PDG_info=TDatabasePDG::Instance();
TLorentzVector Beam_LV;
Beam_LV.SetXYZM(0,0,10.2,0.000511);
TLorentzVector Target_LV;
Target_LV.SetXYZM(0,0,0,0.93827);
TLorentzVector elScat_LV;

float el_Px;
float el_Py;
float el_Pz;
float el_PID;
float el_beta;
float el_chi2PID;
float el_status;
float el_region;
float el_E;
float el_Th;
TLorentzVector el_LV; // No associated branch
float pro_Px;
float pro_Py;
float pro_Pz;
float pro_PID;
float pro_beta;
float pro_chi2PID;
float pro_status;
float pro_region;
float pro_E;
float pro_Th;
TLorentzVector pro_LV; // No associated branch
float kp_Px;
float kp_Py;
float kp_Pz;
float kp_PID;
float kp_beta;
float kp_chi2PID;
float kp_status;
float kp_region;
float kp_E;
float kp_Th;
TLorentzVector kp_LV; // No associated branch
float km_Px;
float km_Py;
float km_Pz;
float km_PID;
float km_beta;
float km_chi2PID;
float km_status;
float km_region;
float km_E;
float km_Th;
TLorentzVector km_LV; // No associated branch
float Q2;
float Egamma;
float MissMass_el;
float MissMass2_el;
float MissEnergy_el;
float MissMass_pro;
float MissMass2_pro;
float MissEnergy_pro;
float MissMass_kp;
float MissMass2_kp;
float MissEnergy_kp;
float MissMass_km;
float MissMass2_km;
float MissEnergy_km;
float MissMass_el_pro;
float MissMass2_el_pro;
float MissEnergy_el_pro;
float MissMass_el_kp;
float MissMass2_el_kp;
float MissEnergy_el_kp;
float MissMass_el_km;
float MissMass2_el_km;
float MissEnergy_el_km;
float MissMass_pro_kp;
float MissMass2_pro_kp;
float MissEnergy_pro_kp;
float MissMass_pro_km;
float MissMass2_pro_km;
float MissEnergy_pro_km;
float MissMass_kp_km;
float MissMass2_kp_km;
float MissEnergy_kp_km;
float MissMass_el_pro_kp;
float MissMass2_el_pro_kp;
float MissEnergy_el_pro_kp;
float MissMass_el_pro_km;
float MissMass2_el_pro_km;
float MissEnergy_el_pro_km;
float MissMass_el_kp_km;
float MissMass2_el_kp_km;
float MissEnergy_el_kp_km;
float MissMass_pro_kp_km;
float MissMass2_pro_kp_km;
float MissEnergy_pro_kp_km;
float MissMass_el_pro_kp_km;
float MissMass2_el_pro_kp_km;
float MissEnergy_el_pro_kp_km;

tree->Branch("el_Px",&el_Px);
tree->Branch("el_Py",&el_Py);
tree->Branch("el_Pz",&el_Pz);
tree->Branch("el_PID",&el_PID);
tree->Branch("el_beta",&el_beta);
tree->Branch("el_chi2PID",&el_chi2PID);
tree->Branch("el_status",&el_status);
tree->Branch("el_region",&el_region);
tree->Branch("pro_Px",&pro_Px);
tree->Branch("pro_Py",&pro_Py);
tree->Branch("pro_Pz",&pro_Pz);
tree->Branch("pro_PID",&pro_PID);
tree->Branch("pro_beta",&pro_beta);
tree->Branch("pro_chi2PID",&pro_chi2PID);
tree->Branch("pro_status",&pro_status);
tree->Branch("pro_region",&pro_region);
tree->Branch("kp_Px",&kp_Px);
tree->Branch("kp_Py",&kp_Py);
tree->Branch("kp_Pz",&kp_Pz);
tree->Branch("kp_PID",&kp_PID);
tree->Branch("kp_beta",&kp_beta);
tree->Branch("kp_chi2PID",&kp_chi2PID);
tree->Branch("kp_status",&kp_status);
tree->Branch("kp_region",&kp_region);
tree->Branch("km_Px",&km_Px);
tree->Branch("km_Py",&km_Py);
tree->Branch("km_Pz",&km_Pz);
tree->Branch("km_PID",&km_PID);
tree->Branch("km_beta",&km_beta);
tree->Branch("km_chi2PID",&km_chi2PID);
tree->Branch("km_status",&km_status);
tree->Branch("km_region",&km_region);
tree->Branch("Q2",&Q2);
tree->Branch("Egamma",&Egamma);
tree->Branch("MissMass_el",&MissMass_el);
tree->Branch("MissMass2_el",&MissMass2_el);
tree->Branch("MissEnergy_el",&MissEnergy_el);
tree->Branch("MissMass_pro",&MissMass_pro);
tree->Branch("MissMass2_pro",&MissMass2_pro);
tree->Branch("MissEnergy_pro",&MissEnergy_pro);
tree->Branch("MissMass_kp",&MissMass_kp);
tree->Branch("MissMass2_kp",&MissMass2_kp);
tree->Branch("MissEnergy_kp",&MissEnergy_kp);
tree->Branch("MissMass_km",&MissMass_km);
tree->Branch("MissMass2_km",&MissMass2_km);
tree->Branch("MissEnergy_km",&MissEnergy_km);
tree->Branch("MissMass_el_pro",&MissMass_el_pro);
tree->Branch("MissMass2_el_pro",&MissMass2_el_pro);
tree->Branch("MissEnergy_el_pro",&MissEnergy_el_pro);
tree->Branch("MissMass_el_kp",&MissMass_el_kp);
tree->Branch("MissMass2_el_kp",&MissMass2_el_kp);
tree->Branch("MissEnergy_el_kp",&MissEnergy_el_kp);
tree->Branch("MissMass_el_km",&MissMass_el_km);
tree->Branch("MissMass2_el_km",&MissMass2_el_km);
tree->Branch("MissEnergy_el_km",&MissEnergy_el_km);
tree->Branch("MissMass_pro_kp",&MissMass_pro_kp);
tree->Branch("MissMass2_pro_kp",&MissMass2_pro_kp);
tree->Branch("MissEnergy_pro_kp",&MissEnergy_pro_kp);
tree->Branch("MissMass_pro_km",&MissMass_pro_km);
tree->Branch("MissMass2_pro_km",&MissMass2_pro_km);
tree->Branch("MissEnergy_pro_km",&MissEnergy_pro_km);
tree->Branch("MissMass_kp_km",&MissMass_kp_km);
tree->Branch("MissMass2_kp_km",&MissMass2_kp_km);
tree->Branch("MissEnergy_kp_km",&MissEnergy_kp_km);
tree->Branch("MissMass_el_pro_kp",&MissMass_el_pro_kp);
tree->Branch("MissMass2_el_pro_kp",&MissMass2_el_pro_kp);
tree->Branch("MissEnergy_el_pro_kp",&MissEnergy_el_pro_kp);
tree->Branch("MissMass_el_pro_km",&MissMass_el_pro_km);
tree->Branch("MissMass2_el_pro_km",&MissMass2_el_pro_km);
tree->Branch("MissEnergy_el_pro_km",&MissEnergy_el_pro_km);
tree->Branch("MissMass_el_kp_km",&MissMass_el_kp_km);
tree->Branch("MissMass2_el_kp_km",&MissMass2_el_kp_km);
tree->Branch("MissEnergy_el_kp_km",&MissEnergy_el_kp_km);
tree->Branch("MissMass_pro_kp_km",&MissMass_pro_kp_km);
tree->Branch("MissMass2_pro_kp_km",&MissMass2_pro_kp_km);
tree->Branch("MissEnergy_pro_kp_km",&MissEnergy_pro_kp_km);
tree->Branch("MissMass_el_pro_kp_km",&MissMass_el_pro_kp_km);
tree->Branch("MissMass2_el_pro_kp_km",&MissMass2_el_pro_kp_km);
tree->Branch("MissEnergy_el_pro_kp_km",&MissEnergy_el_pro_kp_km);

for(Int_t i=0;i<files->GetEntries();i++){

    clas12reader c12(files->At(i)->GetTitle());

    c12.addAtLeastPid(11,1);
    c12.addAtLeastPid(2212,1);
    c12.addAtLeastPid(321,1);
    c12.addAtLeastPid(-321,1);

    Int_t eventnumber=0;
    while(c12.next()==true){
        eventnumber++;
        int evn_el_count=0;
        Int_t k = 0;
        auto particle = c12.getDetParticles();
        Int_t numofpart = particle.size();
        for(Int_t k=0;k<numofpart;k++){
            // Beam-electron(scattered) kinematics
            if (particle[k]->par()->getPid()==11 && evn_el_count==0){
              elScat_LV.SetXYZM(particle[k]->par()->getPx(),particle[k]->par()->getPy(),particle[k]->par()->getPz(),0.000511);
              evn_el_count++;
            }
            if (particle[k]->par()->getPid()==11){
              el_Px=particle[k]->par()->getPx();
              el_Py=particle[k]->par()->getPy();
              el_Pz=particle[k]->par()->getPz();
              el_PID=particle[k]->par()->getPid();
              el_beta=particle[k]->par()->getBeta();
              el_chi2PID=particle[k]->par()->getChi2Pid();
              el_status=particle[k]->par()->getStatus();
              int region_abs = abs(particle[k]->par()->getStatus());
	      string region_abs_str = std::to_string(region_abs);
	      region_abs_str.replace(1, 3, 3, '0');
              el_region=std::stoi(region_abs_str);
              float el_M=PDG_info->GetParticle(particle[k]->par()->getPid())->Mass();
              el_LV.SetXYZM(el_Px,el_Py,el_Pz,el_M);
              el_E=el_LV.E();
              el_Th=el_LV.Theta();
            }
            if (particle[k]->par()->getPid()==2212){
              pro_Px=particle[k]->par()->getPx();
              pro_Py=particle[k]->par()->getPy();
              pro_Pz=particle[k]->par()->getPz();
              pro_PID=particle[k]->par()->getPid();
              pro_beta=particle[k]->par()->getBeta();
              pro_chi2PID=particle[k]->par()->getChi2Pid();
              pro_status=particle[k]->par()->getStatus();
              int region_abs = abs(particle[k]->par()->getStatus());
	      string region_abs_str = std::to_string(region_abs);
	      region_abs_str.replace(1, 3, 3, '0');
              pro_region=std::stoi(region_abs_str);
              float pro_M=PDG_info->GetParticle(particle[k]->par()->getPid())->Mass();
              pro_LV.SetXYZM(pro_Px,pro_Py,pro_Pz,pro_M);
              pro_E=pro_LV.E();
              pro_Th=pro_LV.Theta();
            }
            if (particle[k]->par()->getPid()==321){
              kp_Px=particle[k]->par()->getPx();
              kp_Py=particle[k]->par()->getPy();
              kp_Pz=particle[k]->par()->getPz();
              kp_PID=particle[k]->par()->getPid();
              kp_beta=particle[k]->par()->getBeta();
              kp_chi2PID=particle[k]->par()->getChi2Pid();
              kp_status=particle[k]->par()->getStatus();
              int region_abs = abs(particle[k]->par()->getStatus());
	      string region_abs_str = std::to_string(region_abs);
	      region_abs_str.replace(1, 3, 3, '0');
              kp_region=std::stoi(region_abs_str);
              float kp_M=PDG_info->GetParticle(particle[k]->par()->getPid())->Mass();
              kp_LV.SetXYZM(kp_Px,kp_Py,kp_Pz,kp_M);
              kp_E=kp_LV.E();
              kp_Th=kp_LV.Theta();
            }
            if (particle[k]->par()->getPid()==-321){
              km_Px=particle[k]->par()->getPx();
              km_Py=particle[k]->par()->getPy();
              km_Pz=particle[k]->par()->getPz();
              km_PID=particle[k]->par()->getPid();
              km_beta=particle[k]->par()->getBeta();
              km_chi2PID=particle[k]->par()->getChi2Pid();
              km_status=particle[k]->par()->getStatus();
              int region_abs = abs(particle[k]->par()->getStatus());
	      string region_abs_str = std::to_string(region_abs);
	      region_abs_str.replace(1, 3, 3, '0');
              km_region=std::stoi(region_abs_str);
              float km_M=PDG_info->GetParticle(particle[k]->par()->getPid())->Mass();
              km_LV.SetXYZM(km_Px,km_Py,km_Pz,km_M);
              km_E=km_LV.E();
              km_Th=km_LV.Theta();
            }
        }

        MissMass_el = (Beam_LV + Target_LV - pro_LV  -  kp_LV  -  km_LV).M();
        MissMass2_el = (Beam_LV + Target_LV - pro_LV  -  kp_LV  -  km_LV).M2();
        MissEnergy_el = Beam_LV.E() + Target_LV.E() - pro_LV.E()-kp_LV.E()-km_LV.E();
        MissMass_pro = (Beam_LV + Target_LV - el_LV  -  kp_LV  -  km_LV).M();
        MissMass2_pro = (Beam_LV + Target_LV - el_LV  -  kp_LV  -  km_LV).M2();
        MissEnergy_pro = Beam_LV.E() + Target_LV.E() - el_LV.E()-kp_LV.E()-km_LV.E();
        MissMass_kp = (Beam_LV + Target_LV - el_LV  -  pro_LV  -  km_LV).M();
        MissMass2_kp = (Beam_LV + Target_LV - el_LV  -  pro_LV  -  km_LV).M2();
        MissEnergy_kp = Beam_LV.E() + Target_LV.E() - el_LV.E()-pro_LV.E()-km_LV.E();
        MissMass_km = (Beam_LV + Target_LV - el_LV  -  pro_LV  -  kp_LV).M();
        MissMass2_km = (Beam_LV + Target_LV - el_LV  -  pro_LV  -  kp_LV).M2();
        MissEnergy_km = Beam_LV.E() + Target_LV.E() - el_LV.E()-pro_LV.E()-kp_LV.E();
        MissMass_el_pro = (Beam_LV + Target_LV - kp_LV  -  km_LV).M();
        MissMass2_el_pro = (Beam_LV + Target_LV - kp_LV  -  km_LV).M2();
        MissEnergy_el_pro = Beam_LV.E() + Target_LV.E() - kp_LV.E()-km_LV.E();
        InvMass_el_kp = (el_LV  +  kp_LV).M();
        MissMass_el_kp = (Beam_LV + Target_LV - pro_LV  -  km_LV).M();
        MissMass2_el_kp = (Beam_LV + Target_LV - pro_LV  -  km_LV).M2();
        MissEnergy_el_kp = Beam_LV.E() + Target_LV.E() - pro_LV.E()-km_LV.E();
        InvMass_el_km = (el_LV  +  km_LV).M();
        MissMass_el_km = (Beam_LV + Target_LV - pro_LV  -  kp_LV).M();
        MissMass2_el_km = (Beam_LV + Target_LV - pro_LV  -  kp_LV).M2();
        MissEnergy_el_km = Beam_LV.E() + Target_LV.E() - pro_LV.E()-kp_LV.E();
        InvMass_pro_kp = (pro_LV  +  kp_LV).M();
        MissMass_pro_kp = (Beam_LV + Target_LV - el_LV  -  km_LV).M();
        MissMass2_pro_kp = (Beam_LV + Target_LV - el_LV  -  km_LV).M2();
        MissEnergy_pro_kp = Beam_LV.E() + Target_LV.E() - el_LV.E()-km_LV.E();
        InvMass_pro_km = (pro_LV  +  km_LV).M();
        MissMass_pro_km = (Beam_LV + Target_LV - el_LV  -  kp_LV).M();
        MissMass2_pro_km = (Beam_LV + Target_LV - el_LV  -  kp_LV).M2();
        MissEnergy_pro_km = Beam_LV.E() + Target_LV.E() - el_LV.E()-kp_LV.E();
        InvMass_kp_km = (kp_LV  +  km_LV).M();
        MissMass_kp_km = (Beam_LV + Target_LV - el_LV  -  pro_LV).M();
        MissMass2_kp_km = (Beam_LV + Target_LV - el_LV  -  pro_LV).M2();
        MissEnergy_kp_km = Beam_LV.E() + Target_LV.E() - el_LV.E()-pro_LV.E();
        InvMass_el_pro_kp = (el_LV  +  pro_LV  +  kp_LV).M();
        MissMass_el_pro_kp = (Beam_LV + Target_LV - km_LV).M();
        MissMass2_el_pro_kp = (Beam_LV + Target_LV - km_LV).M2();
        MissEnergy_el_pro_kp = Beam_LV.E() + Target_LV.E() - km_LV.E();
        InvMass_el_pro_km = (el_LV  +  pro_LV  +  km_LV).M();
        MissMass_el_pro_km = (Beam_LV + Target_LV - kp_LV).M();
        MissMass2_el_pro_km = (Beam_LV + Target_LV - kp_LV).M2();
        MissEnergy_el_pro_km = Beam_LV.E() + Target_LV.E() - kp_LV.E();
        InvMass_el_kp_km = (el_LV  +  kp_LV  +  km_LV).M();
        MissMass_el_kp_km = (Beam_LV + Target_LV - pro_LV).M();
        MissMass2_el_kp_km = (Beam_LV + Target_LV - pro_LV).M2();
        MissEnergy_el_kp_km = Beam_LV.E() + Target_LV.E() - pro_LV.E();
        InvMass_pro_kp_km = (pro_LV  +  kp_LV  +  km_LV).M();
        MissMass_pro_kp_km = (Beam_LV + Target_LV - el_LV).M();
        MissMass2_pro_kp_km = (Beam_LV + Target_LV - el_LV).M2();
        MissEnergy_pro_kp_km = Beam_LV.E() + Target_LV.E() - el_LV.E();
        InvMass_el_pro_kp_km = (el_LV  +  pro_LV  +  kp_LV  +  km_LV).M();
        MissMass_el_pro_kp_km = (Beam_LV + Target_LV - el_LV  -  pro_LV  -  kp_LV  -  km_LV).M();
        MissMass2_el_pro_kp_km = (Beam_LV + Target_LV - el_LV  -  pro_LV  -  kp_LV  -  km_LV).M2();
        MissEnergy_el_pro_kp_km = Beam_LV.E() + Target_LV.E() - el_LV.E()-pro_LV.E()-kp_LV.E()-km_LV.E();
        // Beam-electron(scattered) kinematics
        TLorentzVector gamma;
        gamma = Beam_LV - elScat_LV;
        Q2 = -gamma.M2();
        Egamma = gamma.E();
        evn_el_count=0;

        tree->Fill();

    }
}
tree->Write();

cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
cout << "Skimmed tree saved to 'skim_tree.root'" << endl;
cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

}
